// Generated by CoffeeScript 1.7.1
(function() {
  (function($) {
    var BID_EL_HEIGHT, PaymentSocket, bidEntries, formatCurrency, formatValueByElementSettings, init, numeral, updatePageVars, updatePayment;
    bidEntries = {};
    BID_EL_HEIGHT = 66;
    numeral = window.numeral;
    PaymentSocket = window.PaymentSocket = {};
    PaymentSocket.connect = function(refId) {
      var socket;
      socket = window.io.connect();
      socket.on('status', function(data) {});
      socket.on('payment-update', function(data) {
        setTimeout(function() {
          return updatePayment(data);
        }, 1);
      });
      socket.on('disconnect', function() {});
      socket.on('connect', function() {
        socket.emit('listen', refId);
      });
      return socket.on('error', function(e) {
        return console.error("ERROR", e.stack);
      });
    };
    init = function() {};
    updatePayment = function(data) {
      console.log("updatePayment data", data);
      return updatePageVars(data);
    };
    updatePageVars = function(data) {
      var amount, el, fieldName, type, value, _i, _len, _ref, _ref1, _results;
      _ref = ['notificationsRemaining'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        fieldName = _ref[_i];
        el = $("*[data-field=\"" + fieldName + "\"]");
        if (!el.length) {
          continue;
        }
        value = formatValueByElementSettings(data[fieldName], el);
        el.html(value);
      }
      if (data.isLifetime && $('*[data-islifetime="no"]').is(':visible')) {
        $('.received').show();
        $('*[data-islifetime="no"]').fadeOut('fast', function() {
          return $('*[data-islifetime="yes"]').fadeIn('fast');
        });
      }
      if (!data.isLifetime && $('*[data-islifetime="yes"]').is(':visible')) {
        $('*[data-islifetime="yes"]').fadeOut('fast', function() {
          return $('*[data-islifetime="no"]').fadeIn('fast');
        });
      }
      $('div.balances').empty();
      _ref1 = data.balance;
      _results = [];
      for (type in _ref1) {
        amount = _ref1[type];
        _results.push($('div.balances').append("<div class=\"balance\">Received " + (formatCurrency(amount)) + " " + type + "</div>"));
      }
      return _results;
    };
    formatCurrency = function(amount) {
      if (amount == null) {
        return '';
      }
      if (isNaN(amount)) {
        return '';
      }
      return numeral(amount / 100000000).format('0,0.[00000000]');
    };
    formatValueByElementSettings = function(value, el) {
      var formatter;
      if (!el.length) {
        return value;
      }
      formatter = el.data('formatter');
      switch (formatter) {
        case "bool":
          if (value) {
            value = "Yes";
            el.addClass('yes').removeClass('no');
          } else {
            value = "No";
            el.addClass('no').removeClass('yes');
          }
          break;
        case "currency":
          value = formatCurrency(value);
      }
      return value;
    };
    return init();
  })(jQuery);

}).call(this);
